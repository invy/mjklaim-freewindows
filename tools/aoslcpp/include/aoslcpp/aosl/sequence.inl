// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__SEQUENCE_INL
#define AOSLCPP_AOSL__SEQUENCE_INL

// Begin prologue.
//
//
// End prologue.

#include "aoslcpp/aosl/meta.hpp"
#include "aoslcpp/aosl/meta.inl"

#include "aoslcpp/aosl/library.hpp"
#include "aoslcpp/aosl/library.inl"

#include "aoslcpp/aosl/canvas.hpp"
#include "aoslcpp/aosl/canvas.inl"

#include "aoslcpp/aosl/story.hpp"
#include "aoslcpp/aosl/story.inl"

namespace aosl
{
  // Sequence
  // 

  inline
  const Sequence::MetaOptional& Sequence::
  meta () const
  {
    return this->meta_;
  }

  inline
  Sequence::MetaOptional& Sequence::
  meta ()
  {
    return this->meta_;
  }

  inline
  void Sequence::
  meta (const MetaType& x)
  {
    this->meta_.set (x);
  }

  inline
  void Sequence::
  meta (const MetaOptional& x)
  {
    this->meta_ = x;
  }

  inline
  void Sequence::
  meta (::std::auto_ptr< MetaType > x)
  {
    this->meta_.set (x);
  }

  inline
  const Sequence::LibraryType& Sequence::
  library () const
  {
    return this->library_.get ();
  }

  inline
  Sequence::LibraryType& Sequence::
  library ()
  {
    return this->library_.get ();
  }

  inline
  void Sequence::
  library (const LibraryType& x)
  {
    this->library_.set (x);
  }

  inline
  void Sequence::
  library (::std::auto_ptr< LibraryType > x)
  {
    this->library_.set (x);
  }

  inline
  ::std::auto_ptr< Sequence::LibraryType > Sequence::
  detach_library ()
  {
    return this->library_.detach ();
  }

  inline
  const Sequence::CanvasType& Sequence::
  canvas () const
  {
    return this->canvas_.get ();
  }

  inline
  Sequence::CanvasType& Sequence::
  canvas ()
  {
    return this->canvas_.get ();
  }

  inline
  void Sequence::
  canvas (const CanvasType& x)
  {
    this->canvas_.set (x);
  }

  inline
  void Sequence::
  canvas (::std::auto_ptr< CanvasType > x)
  {
    this->canvas_.set (x);
  }

  inline
  ::std::auto_ptr< Sequence::CanvasType > Sequence::
  detach_canvas ()
  {
    return this->canvas_.detach ();
  }

  inline
  const Sequence::StoryType& Sequence::
  story () const
  {
    return this->story_.get ();
  }

  inline
  Sequence::StoryType& Sequence::
  story ()
  {
    return this->story_.get ();
  }

  inline
  void Sequence::
  story (const StoryType& x)
  {
    this->story_.set (x);
  }

  inline
  void Sequence::
  story (::std::auto_ptr< StoryType > x)
  {
    this->story_.set (x);
  }

  inline
  ::std::auto_ptr< Sequence::StoryType > Sequence::
  detach_story ()
  {
    return this->story_.detach ();
  }

  inline
  const Sequence::NameType& Sequence::
  name () const
  {
    return this->name_.get ();
  }

  inline
  Sequence::NameType& Sequence::
  name ()
  {
    return this->name_.get ();
  }

  inline
  void Sequence::
  name (const NameType& x)
  {
    this->name_.set (x);
  }

  inline
  void Sequence::
  name (::std::auto_ptr< NameType > x)
  {
    this->name_.set (x);
  }

  inline
  ::std::auto_ptr< Sequence::NameType > Sequence::
  detach_name ()
  {
    return this->name_.detach ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__SEQUENCE_INL
