// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__CHANGE_INL
#define AOSLCPP_AOSL__CHANGE_INL

// Begin prologue.
//
//
// End prologue.

#include "aoslcpp/aosl/list_effect.hpp"
#include "aoslcpp/aosl/list_effect.inl"

#include "aoslcpp/aosl/script.hpp"
#include "aoslcpp/aosl/script.inl"

#include "aoslcpp/aosl/extension.hpp"
#include "aoslcpp/aosl/extension.inl"

#include "aoslcpp/aosl/change_type.hpp"
#include "aoslcpp/aosl/change_type.inl"

#include "aoslcpp/aosl/object_ref.hpp"
#include "aoslcpp/aosl/object_ref.inl"

namespace aosl
{
  // Change
  // 

  inline
  const Change::EffectsOptional& Change::
  effects () const
  {
    return this->effects_;
  }

  inline
  Change::EffectsOptional& Change::
  effects ()
  {
    return this->effects_;
  }

  inline
  void Change::
  effects (const EffectsType& x)
  {
    this->effects_.set (x);
  }

  inline
  void Change::
  effects (const EffectsOptional& x)
  {
    this->effects_ = x;
  }

  inline
  void Change::
  effects (::std::auto_ptr< EffectsType > x)
  {
    this->effects_.set (x);
  }

  inline
  const Change::ScriptOptional& Change::
  script () const
  {
    return this->script_;
  }

  inline
  Change::ScriptOptional& Change::
  script ()
  {
    return this->script_;
  }

  inline
  void Change::
  script (const ScriptType& x)
  {
    this->script_.set (x);
  }

  inline
  void Change::
  script (const ScriptOptional& x)
  {
    this->script_ = x;
  }

  inline
  void Change::
  script (::std::auto_ptr< ScriptType > x)
  {
    this->script_.set (x);
  }

  inline
  const Change::ExtensionOptional& Change::
  extension () const
  {
    return this->extension_;
  }

  inline
  Change::ExtensionOptional& Change::
  extension ()
  {
    return this->extension_;
  }

  inline
  void Change::
  extension (const ExtensionType& x)
  {
    this->extension_.set (x);
  }

  inline
  void Change::
  extension (const ExtensionOptional& x)
  {
    this->extension_ = x;
  }

  inline
  void Change::
  extension (::std::auto_ptr< ExtensionType > x)
  {
    this->extension_.set (x);
  }

  inline
  const Change::TypeType& Change::
  type () const
  {
    return this->type_.get ();
  }

  inline
  Change::TypeType& Change::
  type ()
  {
    return this->type_.get ();
  }

  inline
  void Change::
  type (const TypeType& x)
  {
    this->type_.set (x);
  }

  inline
  void Change::
  type (::std::auto_ptr< TypeType > x)
  {
    this->type_.set (x);
  }

  inline
  ::std::auto_ptr< Change::TypeType > Change::
  detach_type ()
  {
    return this->type_.detach ();
  }

  inline
  const Change::TypeType& Change::
  type_default_value ()
  {
    return type_default_value_;
  }

  inline
  const Change::ObjectType& Change::
  object () const
  {
    return this->object_.get ();
  }

  inline
  Change::ObjectType& Change::
  object ()
  {
    return this->object_.get ();
  }

  inline
  void Change::
  object (const ObjectType& x)
  {
    this->object_.set (x);
  }

  inline
  void Change::
  object (::std::auto_ptr< ObjectType > x)
  {
    this->object_.set (x);
  }

  inline
  ::std::auto_ptr< Change::ObjectType > Change::
  detach_object ()
  {
    return this->object_.detach ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__CHANGE_INL
