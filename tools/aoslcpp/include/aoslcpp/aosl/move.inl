// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__MOVE_INL
#define AOSLCPP_AOSL__MOVE_INL

// Begin prologue.
//
//
// End prologue.

#include "aoslcpp/aosl/list_change.inl"

#include "aoslcpp/aosl/extension.hpp"
#include "aoslcpp/aosl/extension.inl"

#include "aoslcpp/aosl/stage_ref.hpp"
#include "aoslcpp/aosl/stage_ref.inl"

#include "aoslcpp/aosl/move_id.hpp"
#include "aoslcpp/aosl/move_id.inl"

namespace aosl
{
  // Move
  // 

  inline
  const Move::ExtensionOptional& Move::
  extension () const
  {
    return this->extension_;
  }

  inline
  Move::ExtensionOptional& Move::
  extension ()
  {
    return this->extension_;
  }

  inline
  void Move::
  extension (const ExtensionType& x)
  {
    this->extension_.set (x);
  }

  inline
  void Move::
  extension (const ExtensionOptional& x)
  {
    this->extension_ = x;
  }

  inline
  void Move::
  extension (::std::auto_ptr< ExtensionType > x)
  {
    this->extension_.set (x);
  }

  inline
  const Move::FromType& Move::
  from () const
  {
    return this->from_.get ();
  }

  inline
  Move::FromType& Move::
  from ()
  {
    return this->from_.get ();
  }

  inline
  void Move::
  from (const FromType& x)
  {
    this->from_.set (x);
  }

  inline
  void Move::
  from (::std::auto_ptr< FromType > x)
  {
    this->from_.set (x);
  }

  inline
  ::std::auto_ptr< Move::FromType > Move::
  detach_from ()
  {
    return this->from_.detach ();
  }

  inline
  const Move::ToType& Move::
  to () const
  {
    return this->to_.get ();
  }

  inline
  Move::ToType& Move::
  to ()
  {
    return this->to_.get ();
  }

  inline
  void Move::
  to (const ToType& x)
  {
    this->to_.set (x);
  }

  inline
  void Move::
  to (::std::auto_ptr< ToType > x)
  {
    this->to_.set (x);
  }

  inline
  ::std::auto_ptr< Move::ToType > Move::
  detach_to ()
  {
    return this->to_.detach ();
  }

  inline
  const Move::IdOptional& Move::
  id () const
  {
    return this->id_;
  }

  inline
  Move::IdOptional& Move::
  id ()
  {
    return this->id_;
  }

  inline
  void Move::
  id (const IdType& x)
  {
    this->id_.set (x);
  }

  inline
  void Move::
  id (const IdOptional& x)
  {
    this->id_ = x;
  }

  inline
  void Move::
  id (::std::auto_ptr< IdType > x)
  {
    this->id_.set (x);
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__MOVE_INL
