// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__STORY_INL
#define AOSLCPP_AOSL__STORY_INL

// Begin prologue.
//
//
// End prologue.

#include "aoslcpp/aosl/property.hpp"
#include "aoslcpp/aosl/property.inl"

#include "aoslcpp/aosl/navigation.hpp"
#include "aoslcpp/aosl/navigation.inl"

#include "aoslcpp/aosl/list_stage.hpp"
#include "aoslcpp/aosl/list_stage.inl"

#include "aoslcpp/aosl/list_move.hpp"
#include "aoslcpp/aosl/list_move.inl"

#include "aoslcpp/aosl/stage_ref.hpp"
#include "aoslcpp/aosl/stage_ref.inl"

namespace aosl
{
  // Story
  // 

  inline
  const Story::PropertiesOptional& Story::
  properties () const
  {
    return this->properties_;
  }

  inline
  Story::PropertiesOptional& Story::
  properties ()
  {
    return this->properties_;
  }

  inline
  void Story::
  properties (const PropertiesType& x)
  {
    this->properties_.set (x);
  }

  inline
  void Story::
  properties (const PropertiesOptional& x)
  {
    this->properties_ = x;
  }

  inline
  void Story::
  properties (::std::auto_ptr< PropertiesType > x)
  {
    this->properties_.set (x);
  }

  inline
  const Story::NavigationOptional& Story::
  navigation () const
  {
    return this->navigation_;
  }

  inline
  Story::NavigationOptional& Story::
  navigation ()
  {
    return this->navigation_;
  }

  inline
  void Story::
  navigation (const NavigationType& x)
  {
    this->navigation_.set (x);
  }

  inline
  void Story::
  navigation (const NavigationOptional& x)
  {
    this->navigation_ = x;
  }

  inline
  void Story::
  navigation (::std::auto_ptr< NavigationType > x)
  {
    this->navigation_.set (x);
  }

  inline
  const Story::StagesType& Story::
  stages () const
  {
    return this->stages_.get ();
  }

  inline
  Story::StagesType& Story::
  stages ()
  {
    return this->stages_.get ();
  }

  inline
  void Story::
  stages (const StagesType& x)
  {
    this->stages_.set (x);
  }

  inline
  void Story::
  stages (::std::auto_ptr< StagesType > x)
  {
    this->stages_.set (x);
  }

  inline
  ::std::auto_ptr< Story::StagesType > Story::
  detach_stages ()
  {
    return this->stages_.detach ();
  }

  inline
  const Story::MovesType& Story::
  moves () const
  {
    return this->moves_.get ();
  }

  inline
  Story::MovesType& Story::
  moves ()
  {
    return this->moves_.get ();
  }

  inline
  void Story::
  moves (const MovesType& x)
  {
    this->moves_.set (x);
  }

  inline
  void Story::
  moves (::std::auto_ptr< MovesType > x)
  {
    this->moves_.set (x);
  }

  inline
  ::std::auto_ptr< Story::MovesType > Story::
  detach_moves ()
  {
    return this->moves_.detach ();
  }

  inline
  const Story::BeginType& Story::
  begin () const
  {
    return this->begin_.get ();
  }

  inline
  Story::BeginType& Story::
  begin ()
  {
    return this->begin_.get ();
  }

  inline
  void Story::
  begin (const BeginType& x)
  {
    this->begin_.set (x);
  }

  inline
  void Story::
  begin (::std::auto_ptr< BeginType > x)
  {
    this->begin_.set (x);
  }

  inline
  ::std::auto_ptr< Story::BeginType > Story::
  detach_begin ()
  {
    return this->begin_.detach ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__STORY_INL
