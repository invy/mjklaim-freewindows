// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

/**
 * @file
 * @brief Generated from aosl.xsd.
 */

#ifndef AOSLCPP_AOSL__AOSL_HPP
#define AOSLCPP_AOSL__AOSL_HPP

// Begin prologue.
//

#include <aoslcpp/common.hpp>

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "aoslcpp/aosl/aosl_forward.hpp"

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "aoslcpp/aosl/unit_space.hpp"

#include "aoslcpp/aosl/unit_time.hpp"

#include "aoslcpp/aosl/unit_stream.hpp"

#include "aoslcpp/aosl/value_percent.hpp"

#include "aoslcpp/aosl/angle.hpp"

#include "aoslcpp/aosl/angle_type.hpp"

#include "aoslcpp/aosl/vector.hpp"

#include "aoslcpp/aosl/rotation.hpp"

#include "aoslcpp/aosl/box.hpp"

#include "aoslcpp/aosl/transformation.hpp"

#include "aoslcpp/aosl/referential.hpp"

#include "aoslcpp/aosl/axis_origin_x.hpp"

#include "aoslcpp/aosl/axis_positive_x.hpp"

#include "aoslcpp/aosl/axis_x.hpp"

#include "aoslcpp/aosl/axis_origin_y.hpp"

#include "aoslcpp/aosl/axis_positive_y.hpp"

#include "aoslcpp/aosl/axis_y.hpp"

#include "aoslcpp/aosl/axis_origin_z.hpp"

#include "aoslcpp/aosl/axis_positive_z.hpp"

#include "aoslcpp/aosl/axis_z.hpp"

#include "aoslcpp/aosl/coordinate_system.hpp"

#include "aoslcpp/aosl/spatial_area.hpp"

#include "aoslcpp/aosl/source_uri.hpp"

#include "aoslcpp/aosl/extension.hpp"

#include "aoslcpp/aosl/name.hpp"

#include "aoslcpp/aosl/email.hpp"

#include "aoslcpp/aosl/version.hpp"

#include "aoslcpp/aosl/property.hpp"

#include "aoslcpp/aosl/controller.hpp"

#include "aoslcpp/aosl/activation.hpp"

#include "aoslcpp/aosl/script.hpp"

#include "aoslcpp/aosl/sequence.hpp"

#include "aoslcpp/aosl/meta.hpp"

#include "aoslcpp/aosl/library.hpp"

#include "aoslcpp/aosl/canvas.hpp"

#include "aoslcpp/aosl/story.hpp"

#include "aoslcpp/aosl/author.hpp"

#include "aoslcpp/aosl/list_author.hpp"

#include "aoslcpp/aosl/target.hpp"

#include "aoslcpp/aosl/list_target.hpp"

#include "aoslcpp/aosl/resource_type.hpp"

#include "aoslcpp/aosl/resource_type_generic.hpp"

#include "aoslcpp/aosl/resource_type_specific.hpp"

#include "aoslcpp/aosl/resource.hpp"

#include "aoslcpp/aosl/list_resource.hpp"

#include "aoslcpp/aosl/library_include.hpp"

#include "aoslcpp/aosl/list_include.hpp"

#include "aoslcpp/aosl/layer.hpp"

#include "aoslcpp/aosl/list_layer.hpp"

#include "aoslcpp/aosl/properties_stream_object.hpp"

#include "aoslcpp/aosl/properties_graphic_object.hpp"

#include "aoslcpp/aosl/properties_interactive_object.hpp"

#include "aoslcpp/aosl/object.hpp"

#include "aoslcpp/aosl/list_object.hpp"

#include "aoslcpp/aosl/object_special.hpp"

#include "aoslcpp/aosl/object_sprite.hpp"

#include "aoslcpp/aosl/object_audio.hpp"

#include "aoslcpp/aosl/object_video.hpp"

#include "aoslcpp/aosl/object_interactive.hpp"

#include "aoslcpp/aosl/stage.hpp"

#include "aoslcpp/aosl/list_stage.hpp"

#include "aoslcpp/aosl/move.hpp"

#include "aoslcpp/aosl/list_move.hpp"

#include "aoslcpp/aosl/change.hpp"

#include "aoslcpp/aosl/change_type_generic.hpp"

#include "aoslcpp/aosl/change_type_specific.hpp"

#include "aoslcpp/aosl/change_type.hpp"

#include "aoslcpp/aosl/list_change.hpp"

#include "aoslcpp/aosl/change_special.hpp"

#include "aoslcpp/aosl/change_activate.hpp"

#include "aoslcpp/aosl/change_deactivate.hpp"

#include "aoslcpp/aosl/change_switch.hpp"

#include "aoslcpp/aosl/change_transform_base.hpp"

#include "aoslcpp/aosl/change_transform.hpp"

#include "aoslcpp/aosl/effect.hpp"

#include "aoslcpp/aosl/list_effect.hpp"

#include "aoslcpp/aosl/navigation.hpp"

#include "aoslcpp/aosl/event.hpp"

#include "aoslcpp/aosl/event_type.hpp"

#include "aoslcpp/aosl/event_signal_base.hpp"

#include "aoslcpp/aosl/event_signal.hpp"

#include "aoslcpp/aosl/event_input_base.hpp"

#include "aoslcpp/aosl/event_input.hpp"

#include "aoslcpp/aosl/event_selection_base.hpp"

#include "aoslcpp/aosl/event_selection.hpp"

#include "aoslcpp/aosl/signal_source.hpp"

#include "aoslcpp/aosl/input_key.hpp"

#include "aoslcpp/aosl/input_value.hpp"

#include "aoslcpp/aosl/unique_id.hpp"

#include "aoslcpp/aosl/stage_id.hpp"

#include "aoslcpp/aosl/move_id.hpp"

#include "aoslcpp/aosl/layer_id.hpp"

#include "aoslcpp/aosl/resource_id.hpp"

#include "aoslcpp/aosl/object_id.hpp"

#include "aoslcpp/aosl/unique_ref.hpp"

#include "aoslcpp/aosl/stage_ref.hpp"

#include "aoslcpp/aosl/resource_ref.hpp"

#include "aoslcpp/aosl/target_move_ref.hpp"

#include "aoslcpp/aosl/special_move_ref.hpp"

#include "aoslcpp/aosl/move_ref.hpp"

#include "aoslcpp/aosl/target_layer_ref.hpp"

#include "aoslcpp/aosl/special_layer_ref.hpp"

#include "aoslcpp/aosl/layer_ref.hpp"

#include "aoslcpp/aosl/target_object_ref.hpp"

#include "aoslcpp/aosl/special_object_ref.hpp"

#include "aoslcpp/aosl/object_ref.hpp"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "aoslcpp/aosl/unit_space.hpp"

#include "aoslcpp/aosl/unit_time.hpp"

#include "aoslcpp/aosl/unit_stream.hpp"

#include "aoslcpp/aosl/value_percent.hpp"

#include "aoslcpp/aosl/angle.hpp"

#include "aoslcpp/aosl/angle_type.hpp"

#include "aoslcpp/aosl/vector.hpp"

#include "aoslcpp/aosl/rotation.hpp"

#include "aoslcpp/aosl/box.hpp"

#include "aoslcpp/aosl/transformation.hpp"

#include "aoslcpp/aosl/referential.hpp"

#include "aoslcpp/aosl/axis_origin_x.hpp"

#include "aoslcpp/aosl/axis_positive_x.hpp"

#include "aoslcpp/aosl/axis_x.hpp"

#include "aoslcpp/aosl/axis_origin_y.hpp"

#include "aoslcpp/aosl/axis_positive_y.hpp"

#include "aoslcpp/aosl/axis_y.hpp"

#include "aoslcpp/aosl/axis_origin_z.hpp"

#include "aoslcpp/aosl/axis_positive_z.hpp"

#include "aoslcpp/aosl/axis_z.hpp"

#include "aoslcpp/aosl/coordinate_system.hpp"

#include "aoslcpp/aosl/spatial_area.hpp"

#include "aoslcpp/aosl/source_uri.hpp"

#include "aoslcpp/aosl/extension.hpp"

#include "aoslcpp/aosl/name.hpp"

#include "aoslcpp/aosl/email.hpp"

#include "aoslcpp/aosl/version.hpp"

#include "aoslcpp/aosl/property.hpp"

#include "aoslcpp/aosl/controller.hpp"

#include "aoslcpp/aosl/activation.hpp"

#include "aoslcpp/aosl/script.hpp"

#include "aoslcpp/aosl/sequence.hpp"

#include "aoslcpp/aosl/meta.hpp"

#include "aoslcpp/aosl/library.hpp"

#include "aoslcpp/aosl/canvas.hpp"

#include "aoslcpp/aosl/story.hpp"

#include "aoslcpp/aosl/author.hpp"

#include "aoslcpp/aosl/list_author.hpp"

#include "aoslcpp/aosl/target.hpp"

#include "aoslcpp/aosl/list_target.hpp"

#include "aoslcpp/aosl/resource_type.hpp"

#include "aoslcpp/aosl/resource_type_generic.hpp"

#include "aoslcpp/aosl/resource_type_specific.hpp"

#include "aoslcpp/aosl/resource.hpp"

#include "aoslcpp/aosl/list_resource.hpp"

#include "aoslcpp/aosl/library_include.hpp"

#include "aoslcpp/aosl/list_include.hpp"

#include "aoslcpp/aosl/layer.hpp"

#include "aoslcpp/aosl/list_layer.hpp"

#include "aoslcpp/aosl/properties_stream_object.hpp"

#include "aoslcpp/aosl/properties_graphic_object.hpp"

#include "aoslcpp/aosl/properties_interactive_object.hpp"

#include "aoslcpp/aosl/object.hpp"

#include "aoslcpp/aosl/list_object.hpp"

#include "aoslcpp/aosl/object_special.hpp"

#include "aoslcpp/aosl/object_sprite.hpp"

#include "aoslcpp/aosl/object_audio.hpp"

#include "aoslcpp/aosl/object_video.hpp"

#include "aoslcpp/aosl/object_interactive.hpp"

#include "aoslcpp/aosl/stage.hpp"

#include "aoslcpp/aosl/list_stage.hpp"

#include "aoslcpp/aosl/move.hpp"

#include "aoslcpp/aosl/list_move.hpp"

#include "aoslcpp/aosl/change.hpp"

#include "aoslcpp/aosl/change_type_generic.hpp"

#include "aoslcpp/aosl/change_type_specific.hpp"

#include "aoslcpp/aosl/change_type.hpp"

#include "aoslcpp/aosl/list_change.hpp"

#include "aoslcpp/aosl/change_special.hpp"

#include "aoslcpp/aosl/change_activate.hpp"

#include "aoslcpp/aosl/change_deactivate.hpp"

#include "aoslcpp/aosl/change_switch.hpp"

#include "aoslcpp/aosl/change_transform_base.hpp"

#include "aoslcpp/aosl/change_transform.hpp"

#include "aoslcpp/aosl/effect.hpp"

#include "aoslcpp/aosl/list_effect.hpp"

#include "aoslcpp/aosl/navigation.hpp"

#include "aoslcpp/aosl/event.hpp"

#include "aoslcpp/aosl/event_type.hpp"

#include "aoslcpp/aosl/event_signal_base.hpp"

#include "aoslcpp/aosl/event_signal.hpp"

#include "aoslcpp/aosl/event_input_base.hpp"

#include "aoslcpp/aosl/event_input.hpp"

#include "aoslcpp/aosl/event_selection_base.hpp"

#include "aoslcpp/aosl/event_selection.hpp"

#include "aoslcpp/aosl/signal_source.hpp"

#include "aoslcpp/aosl/input_key.hpp"

#include "aoslcpp/aosl/input_value.hpp"

#include "aoslcpp/aosl/unique_id.hpp"

#include "aoslcpp/aosl/stage_id.hpp"

#include "aoslcpp/aosl/move_id.hpp"

#include "aoslcpp/aosl/layer_id.hpp"

#include "aoslcpp/aosl/resource_id.hpp"

#include "aoslcpp/aosl/object_id.hpp"

#include "aoslcpp/aosl/unique_ref.hpp"

#include "aoslcpp/aosl/stage_ref.hpp"

#include "aoslcpp/aosl/resource_ref.hpp"

#include "aoslcpp/aosl/target_move_ref.hpp"

#include "aoslcpp/aosl/special_move_ref.hpp"

#include "aoslcpp/aosl/move_ref.hpp"

#include "aoslcpp/aosl/target_layer_ref.hpp"

#include "aoslcpp/aosl/special_layer_ref.hpp"

#include "aoslcpp/aosl/layer_ref.hpp"

#include "aoslcpp/aosl/target_object_ref.hpp"

#include "aoslcpp/aosl/special_object_ref.hpp"

#include "aoslcpp/aosl/object_ref.hpp"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %http://artofsequence.org/aosl/1.x
 * schema namespace.
 */
namespace aosl
{
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "aoslcpp/aosl/unit_space.inl"

#include "aoslcpp/aosl/unit_time.inl"

#include "aoslcpp/aosl/unit_stream.inl"

#include "aoslcpp/aosl/value_percent.inl"

#include "aoslcpp/aosl/angle.inl"

#include "aoslcpp/aosl/angle_type.inl"

#include "aoslcpp/aosl/vector.inl"

#include "aoslcpp/aosl/rotation.inl"

#include "aoslcpp/aosl/box.inl"

#include "aoslcpp/aosl/transformation.inl"

#include "aoslcpp/aosl/referential.inl"

#include "aoslcpp/aosl/axis_origin_x.inl"

#include "aoslcpp/aosl/axis_positive_x.inl"

#include "aoslcpp/aosl/axis_x.inl"

#include "aoslcpp/aosl/axis_origin_y.inl"

#include "aoslcpp/aosl/axis_positive_y.inl"

#include "aoslcpp/aosl/axis_y.inl"

#include "aoslcpp/aosl/axis_origin_z.inl"

#include "aoslcpp/aosl/axis_positive_z.inl"

#include "aoslcpp/aosl/axis_z.inl"

#include "aoslcpp/aosl/coordinate_system.inl"

#include "aoslcpp/aosl/spatial_area.inl"

#include "aoslcpp/aosl/source_uri.inl"

#include "aoslcpp/aosl/extension.inl"

#include "aoslcpp/aosl/name.inl"

#include "aoslcpp/aosl/email.inl"

#include "aoslcpp/aosl/version.inl"

#include "aoslcpp/aosl/property.inl"

#include "aoslcpp/aosl/controller.inl"

#include "aoslcpp/aosl/activation.inl"

#include "aoslcpp/aosl/script.inl"

#include "aoslcpp/aosl/sequence.inl"

#include "aoslcpp/aosl/meta.inl"

#include "aoslcpp/aosl/library.inl"

#include "aoslcpp/aosl/canvas.inl"

#include "aoslcpp/aosl/story.inl"

#include "aoslcpp/aosl/author.inl"

#include "aoslcpp/aosl/list_author.inl"

#include "aoslcpp/aosl/target.inl"

#include "aoslcpp/aosl/list_target.inl"

#include "aoslcpp/aosl/resource_type.inl"

#include "aoslcpp/aosl/resource_type_generic.inl"

#include "aoslcpp/aosl/resource_type_specific.inl"

#include "aoslcpp/aosl/resource.inl"

#include "aoslcpp/aosl/list_resource.inl"

#include "aoslcpp/aosl/library_include.inl"

#include "aoslcpp/aosl/list_include.inl"

#include "aoslcpp/aosl/layer.inl"

#include "aoslcpp/aosl/list_layer.inl"

#include "aoslcpp/aosl/properties_stream_object.inl"

#include "aoslcpp/aosl/properties_graphic_object.inl"

#include "aoslcpp/aosl/properties_interactive_object.inl"

#include "aoslcpp/aosl/object.inl"

#include "aoslcpp/aosl/list_object.inl"

#include "aoslcpp/aosl/object_special.inl"

#include "aoslcpp/aosl/object_sprite.inl"

#include "aoslcpp/aosl/object_audio.inl"

#include "aoslcpp/aosl/object_video.inl"

#include "aoslcpp/aosl/object_interactive.inl"

#include "aoslcpp/aosl/stage.inl"

#include "aoslcpp/aosl/list_stage.inl"

#include "aoslcpp/aosl/move.inl"

#include "aoslcpp/aosl/list_move.inl"

#include "aoslcpp/aosl/change.inl"

#include "aoslcpp/aosl/change_type_generic.inl"

#include "aoslcpp/aosl/change_type_specific.inl"

#include "aoslcpp/aosl/change_type.inl"

#include "aoslcpp/aosl/list_change.inl"

#include "aoslcpp/aosl/change_special.inl"

#include "aoslcpp/aosl/change_activate.inl"

#include "aoslcpp/aosl/change_deactivate.inl"

#include "aoslcpp/aosl/change_switch.inl"

#include "aoslcpp/aosl/change_transform_base.inl"

#include "aoslcpp/aosl/change_transform.inl"

#include "aoslcpp/aosl/effect.inl"

#include "aoslcpp/aosl/list_effect.inl"

#include "aoslcpp/aosl/navigation.inl"

#include "aoslcpp/aosl/event.inl"

#include "aoslcpp/aosl/event_type.inl"

#include "aoslcpp/aosl/event_signal_base.inl"

#include "aoslcpp/aosl/event_signal.inl"

#include "aoslcpp/aosl/event_input_base.inl"

#include "aoslcpp/aosl/event_input.inl"

#include "aoslcpp/aosl/event_selection_base.inl"

#include "aoslcpp/aosl/event_selection.inl"

#include "aoslcpp/aosl/signal_source.inl"

#include "aoslcpp/aosl/input_key.inl"

#include "aoslcpp/aosl/input_value.inl"

#include "aoslcpp/aosl/unique_id.inl"

#include "aoslcpp/aosl/stage_id.inl"

#include "aoslcpp/aosl/move_id.inl"

#include "aoslcpp/aosl/layer_id.inl"

#include "aoslcpp/aosl/resource_id.inl"

#include "aoslcpp/aosl/object_id.inl"

#include "aoslcpp/aosl/unique_ref.inl"

#include "aoslcpp/aosl/stage_ref.inl"

#include "aoslcpp/aosl/resource_ref.inl"

#include "aoslcpp/aosl/target_move_ref.inl"

#include "aoslcpp/aosl/special_move_ref.inl"

#include "aoslcpp/aosl/move_ref.inl"

#include "aoslcpp/aosl/target_layer_ref.inl"

#include "aoslcpp/aosl/special_layer_ref.inl"

#include "aoslcpp/aosl/layer_ref.inl"

#include "aoslcpp/aosl/target_object_ref.inl"

#include "aoslcpp/aosl/special_object_ref.inl"

#include "aoslcpp/aosl/object_ref.inl"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

namespace aosl
{
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace aosl
{
  /**
   * @name Parsing functions for the %sequence document root.
   *
   * The root element for a Sequence.
   * In a full AOSL file, this should be the only root object.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace aosl
{
  /**
   * @name Serialization functions for the %sequence document root.
   *
   * The root element for a Sequence.
   * In a full AOSL file, this should be the only root object.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  serialize_sequence (::std::ostream& os,
                      const ::aosl::Sequence& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serialize_sequence (::std::ostream& os,
                      const ::aosl::Sequence& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serialize_sequence (::std::ostream& os,
                      const ::aosl::Sequence& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  serialize_sequence (::xercesc::XMLFormatTarget& ft,
                      const ::aosl::Sequence& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serialize_sequence (::xercesc::XMLFormatTarget& ft,
                      const ::aosl::Sequence& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serialize_sequence (::xercesc::XMLFormatTarget& ft,
                      const ::aosl::Sequence& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  void
  serialize_sequence (::xercesc::DOMDocument& d,
                      const ::aosl::Sequence& x,
                      ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  serialize_sequence (const ::aosl::Sequence& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  //@}
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "aoslcpp/aosl/aosl.inl"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__AOSL_HPP
