// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aoslcpp/aosl/sequence.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Sequence
  //

  Sequence::
  Sequence ()
  : ::xml_schema::Type (),
    meta_ (::xml_schema::Flags (), this),
    library_ (::xml_schema::Flags (), this),
    canvas_ (::xml_schema::Flags (), this),
    story_ (::xml_schema::Flags (), this)
  {
  }

  Sequence::
  Sequence (const LibraryType& library,
            const CanvasType& canvas,
            const StoryType& story)
  : ::xml_schema::Type (),
    meta_ (::xml_schema::Flags (), this),
    library_ (library, ::xml_schema::Flags (), this),
    canvas_ (canvas, ::xml_schema::Flags (), this),
    story_ (story, ::xml_schema::Flags (), this)
  {
  }

  Sequence::
  Sequence (::std::auto_ptr< LibraryType >& library,
            ::std::auto_ptr< CanvasType >& canvas,
            ::std::auto_ptr< StoryType >& story)
  : ::xml_schema::Type (),
    meta_ (::xml_schema::Flags (), this),
    library_ (library, ::xml_schema::Flags (), this),
    canvas_ (canvas, ::xml_schema::Flags (), this),
    story_ (story, ::xml_schema::Flags (), this)
  {
  }

  Sequence::
  Sequence (const Sequence& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    meta_ (x.meta_, f, this),
    library_ (x.library_, f, this),
    canvas_ (x.canvas_, f, this),
    story_ (x.story_, f, this)
  {
  }

  Sequence::
  Sequence (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    meta_ (f, this),
    library_ (f, this),
    canvas_ (f, this),
    story_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Sequence::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // meta
      //
      if (n.name () == "meta" && n.namespace_ () == "http://artofsequence.org/aosl/1.x")
      {
        ::std::auto_ptr< MetaType > r (
          MetaTraits::create (i, f, this));

        if (!this->meta_)
        {
          this->meta_.set (r);
          continue;
        }
      }

      // library
      //
      if (n.name () == "library" && n.namespace_ () == "http://artofsequence.org/aosl/1.x")
      {
        ::std::auto_ptr< LibraryType > r (
          LibraryTraits::create (i, f, this));

        if (!library_.present ())
        {
          this->library_.set (r);
          continue;
        }
      }

      // canvas
      //
      if (n.name () == "canvas" && n.namespace_ () == "http://artofsequence.org/aosl/1.x")
      {
        ::std::auto_ptr< CanvasType > r (
          CanvasTraits::create (i, f, this));

        if (!canvas_.present ())
        {
          this->canvas_.set (r);
          continue;
        }
      }

      // story
      //
      if (n.name () == "story" && n.namespace_ () == "http://artofsequence.org/aosl/1.x")
      {
        ::std::auto_ptr< StoryType > r (
          StoryTraits::create (i, f, this));

        if (!story_.present ())
        {
          this->story_.set (r);
          continue;
        }
      }

      break;
    }

    if (!library_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "library",
        "http://artofsequence.org/aosl/1.x");
    }

    if (!canvas_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "canvas",
        "http://artofsequence.org/aosl/1.x");
    }

    if (!story_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "story",
        "http://artofsequence.org/aosl/1.x");
    }
  }

  Sequence* Sequence::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Sequence (*this, f, c);
  }

  Sequence::
  ~Sequence ()
  {
  }

  bool
  operator== (const Sequence& x, const Sequence& y)
  {
    if (!(x.meta () == y.meta ()))
      return false;

    if (!(x.library () == y.library ()))
      return false;

    if (!(x.canvas () == y.canvas ()))
      return false;

    if (!(x.story () == y.story ()))
      return false;

    return true;
  }

  bool
  operator!= (const Sequence& x, const Sequence& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Sequence& i)
  {
    if (i.meta ())
    {
      o << ::std::endl << "meta: " << *i.meta ();
    }

    o << ::std::endl << "library: " << i.library ();
    o << ::std::endl << "canvas: " << i.canvas ();
    o << ::std::endl << "story: " << i.story ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Sequence& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // meta
    //
    if (i.meta ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "meta",
          "http://artofsequence.org/aosl/1.x",
          e));

      s << *i.meta ();
    }

    // library
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "library",
          "http://artofsequence.org/aosl/1.x",
          e));

      s << i.library ();
    }

    // canvas
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "canvas",
          "http://artofsequence.org/aosl/1.x",
          e));

      s << i.canvas ();
    }

    // story
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "story",
          "http://artofsequence.org/aosl/1.x",
          e));

      s << i.story ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

